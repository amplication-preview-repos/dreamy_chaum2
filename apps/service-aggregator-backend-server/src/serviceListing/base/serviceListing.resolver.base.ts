/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ServiceListing } from "./ServiceListing";
import { ServiceListingCountArgs } from "./ServiceListingCountArgs";
import { ServiceListingFindManyArgs } from "./ServiceListingFindManyArgs";
import { ServiceListingFindUniqueArgs } from "./ServiceListingFindUniqueArgs";
import { CreateServiceListingArgs } from "./CreateServiceListingArgs";
import { UpdateServiceListingArgs } from "./UpdateServiceListingArgs";
import { DeleteServiceListingArgs } from "./DeleteServiceListingArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { ServiceListingService } from "../serviceListing.service";
@graphql.Resolver(() => ServiceListing)
export class ServiceListingResolverBase {
  constructor(protected readonly service: ServiceListingService) {}

  async _serviceListingsMeta(
    @graphql.Args() args: ServiceListingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ServiceListing])
  async serviceListings(
    @graphql.Args() args: ServiceListingFindManyArgs
  ): Promise<ServiceListing[]> {
    return this.service.serviceListings(args);
  }

  @graphql.Query(() => ServiceListing, { nullable: true })
  async serviceListing(
    @graphql.Args() args: ServiceListingFindUniqueArgs
  ): Promise<ServiceListing | null> {
    const result = await this.service.serviceListing(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ServiceListing)
  async createServiceListing(
    @graphql.Args() args: CreateServiceListingArgs
  ): Promise<ServiceListing> {
    return await this.service.createServiceListing({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ServiceListing)
  async updateServiceListing(
    @graphql.Args() args: UpdateServiceListingArgs
  ): Promise<ServiceListing | null> {
    try {
      return await this.service.updateServiceListing({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceListing)
  async deleteServiceListing(
    @graphql.Args() args: DeleteServiceListingArgs
  ): Promise<ServiceListing | null> {
    try {
      return await this.service.deleteServiceListing(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  async findBookings(
    @graphql.Parent() parent: ServiceListing,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Review], { name: "reviews" })
  async findReviews(
    @graphql.Parent() parent: ServiceListing,
    @graphql.Args() args: ReviewFindManyArgs
  ): Promise<Review[]> {
    const results = await this.service.findReviews(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
