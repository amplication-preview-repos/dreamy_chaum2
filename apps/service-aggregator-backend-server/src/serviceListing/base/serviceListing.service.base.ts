/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ServiceListing as PrismaServiceListing,
  Booking as PrismaBooking,
  Review as PrismaReview,
} from "@prisma/client";

export class ServiceListingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceListingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceListing.count(args);
  }

  async serviceListings(
    args: Prisma.ServiceListingFindManyArgs
  ): Promise<PrismaServiceListing[]> {
    return this.prisma.serviceListing.findMany(args);
  }
  async serviceListing(
    args: Prisma.ServiceListingFindUniqueArgs
  ): Promise<PrismaServiceListing | null> {
    return this.prisma.serviceListing.findUnique(args);
  }
  async createServiceListing(
    args: Prisma.ServiceListingCreateArgs
  ): Promise<PrismaServiceListing> {
    return this.prisma.serviceListing.create(args);
  }
  async updateServiceListing(
    args: Prisma.ServiceListingUpdateArgs
  ): Promise<PrismaServiceListing> {
    return this.prisma.serviceListing.update(args);
  }
  async deleteServiceListing(
    args: Prisma.ServiceListingDeleteArgs
  ): Promise<PrismaServiceListing> {
    return this.prisma.serviceListing.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.serviceListing
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async findReviews(
    parentId: string,
    args: Prisma.ReviewFindManyArgs
  ): Promise<PrismaReview[]> {
    return this.prisma.serviceListing
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviews(args);
  }
}
